# Repo: FirelyTeam/azure-pipeline-templates
# File: build.yml

parameters:
  # Default values
  dotNetCoreVersion: '3.1.102' # can also be use with wildcards:  latest minor version of 3. , use '3.x'
  useVersionSuffix: true # if true, the build number will be added as or to the existing version suffix
  propsFile: '' # used for versionSuffix, if not empty, the versionSuffix will be read from the props file
  restoreDependencies: false
  nuGetServiceConnections: #required when restoreDependies = true
  nuGetSources: #required when restoreDependies = true
  packageArtifacts: false
  publishArtifacts: false
  publishWebProjects: false
  zipAfterPublish: false
  checkoutSubmodules: false
  pool: {}

jobs:
- job: Build
  pool: ${{ parameters.pool }}
  steps:
  - task: DotNetCoreInstaller@2
    inputs:
      version: ${{ parameters.dotNetCoreVersion }}

  - ${{ if eq(parameters.checkoutSubmodules, 'true') }}:
    - checkout: self
      submodules: true

   ## retrieve the version suffix from the props file and set it as a variable
  - powershell: |
      [string]$propsFile = '${{ parameters.propsFile }}'
      [string]$versionSuffix = ''
      if ([string]::IsNullOrEmpty($propsFile) -eq $false)
      {
        $xml = [xml](get-content $propsFile)      
        #Get the suffix version 
        $versionSuffix = $xml.Project.PropertyGroup.VersionSuffix
        $versionSuffix = $versionSuffix.Trim()      
      }  
      Write-Host "Version Suffix: $versionSuffix"
      Write-Host "##vso[task.setvariable variable=VersionSuffix]$versionSuffix"
    displayName: 'Retrieve version suffix'
  - powershell: |    
      Write-Host "Updating Build Number to Version Suffix"
      [string]$versionSuffix = '$(VersionSuffix)'
      if ([string]::IsNullOrEmpty($versionSuffix)) 
      {
        $versionSuffix = $env:BUILD_BUILDNUMBER
      }
      else 
      {
        $versionSuffix = $versionSuffix + "-" + $env:BUILD_BUILDNUMBER
      }    
      Write-Host "Updated version Suffix: $versionSuffix"
      Write-Host "##vso[task.setvariable variable=VersionSuffix]$versionSuffix"
    displayName: 'Add buildnumber to version suffix'
    condition: and(succeeded(), eq('${{ parameters.useVersionSuffix }}', 'true'))

  - ${{ if eq(parameters.restoreDependencies, 'true') }}:
    - template: restore.yml@templates
      parameters:
        nuGetServiceConnections: ${{ parameters.nuGetServiceConnections }}
        nuGetSources: ${{ parameters.nuGetSources }}
      
  - script: dotnet build --configuration $(buildConfiguration) --version-suffix $(VersionSuffix) --no-restore
    displayName: 'dotnet build $(buildConfiguration) with no restore'
    condition: and(succeeded(), eq('${{ parameters.restoreDependencies }}', 'true'))

  - script: dotnet build --configuration $(buildConfiguration) --version-suffix $(VersionSuffix)
    displayName: 'dotnet build $(buildConfiguration)'
    condition: and(succeeded(), eq('${{ parameters.restoreDependencies }}', 'false'))

  - task: DotNetCoreCLI@2
    displayName: 'dotnet test UnitTests'
    inputs:
      command: test
      projects: '**/*Tests*/*Tests.csproj'
      arguments: '--configuration $(buildConfiguration) --no-build --no-restore'

  - template: sign-dlls-template.yml

  - ${{ if eq(parameters.packageArtifacts, 'true') }}:
    - template: package.yml
      parameters:
        useVersionSuffix: ${{ parameters.useVersionSuffix }}  
  
  - ${{ if eq(parameters.publishArtifacts, 'true') }}:
    - template: publish.yml@templates
      parameters:
        useVersionSuffix: ${{ parameters.useVersionSuffix }}
        publishWebProjects: ${{ parameters.publishWebProjects }}
        zipAfterPublish: ${{ parameters.zipAfterPublish }}
        
